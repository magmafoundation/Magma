--- ../src-base/minecraft/net/minecraft/command/CommandHandler.java
+++ ../src-work/minecraft/net/minecraft/command/CommandHandler.java
@@ -6,8 +6,8 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.Map.Entry;
+import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.server.MinecraftServer;
@@ -16,26 +16,28 @@
 import net.minecraft.util.text.TextFormatting;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.command.CommandWrapper;
+import org.bukkit.craftbukkit.v1_12_R1.command.CraftSimpleCommandMap;
+import org.bukkit.craftbukkit.v1_12_R1.command.ModCustomCommand;
+import org.magmafoundation.magma.Magma;
+import org.magmafoundation.magma.configuration.MagmaConfig;
 
 public abstract class CommandHandler implements ICommandManager
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final Map<String, ICommand> commandMap = Maps.<String, ICommand>newHashMap();
+    private final Map<String, ICommand> commandMod = Maps.<String, ICommand>newHashMap();
     private final Set<ICommand> commandSet = Sets.<ICommand>newHashSet();
 
     public int executeCommand(ICommandSender sender, String rawCommand)
     {
         rawCommand = rawCommand.trim();
 
-        if (rawCommand.startsWith("/"))
-        {
-            rawCommand = rawCommand.substring(1);
-        }
-
         String[] astring = rawCommand.split(" ");
         String s = astring[0];
         astring = dropFirstString(astring);
         ICommand icommand = this.commandMap.get(s);
+        if (icommand == null) icommand = CommandWrapper.toNMSCommand(sender, s);
         int i = 0;
 
         try
@@ -145,20 +147,45 @@
     protected abstract MinecraftServer getServer();
 
     public ICommand registerCommand(ICommand command)
-    {
-        this.commandMap.put(command.getName(), command);
-        this.commandSet.add(command);
-
-        for (String s : command.getAliases())
         {
-            ICommand icommand = this.commandMap.get(s);
-
-            if (icommand == null || !icommand.getName().equals(s))
+        String pre = command.getClass().getName().substring(command.getClass().getName().lastIndexOf('.')+1).toLowerCase() + "." + command.getName();
+        if (command instanceof CommandBase)
+        {
+        	if (!((CommandBase)command).permissionNode.equals("minecraft"))
             {
-                this.commandMap.put(s, command);
+        		pre = ((CommandBase)command).permissionNode;
+        		this.commandMod.put(command.getName(), command);
             }
         }
+        return registerCommand(command, pre);
+    }
 
+    public ICommand registerCommand(String permissionGroup, ICommand par1ICommand)
+    {
+        return registerCommand(par1ICommand, permissionGroup + "." + par1ICommand.getName());
+    }
+
+    public ICommand registerCommand(ICommand command, String permissionNode) {
+        List<String> list = command.getAliases();
+        this.commandMap.put(command.getName(), command);
+        this.commandSet.add(command);
+        // register vanilla commands with Bukkit to support permissions.
+        CraftSimpleCommandMap commandMap = MinecraftServer.getServerInst().server.getCraftCommandMap();
+        ModCustomCommand customCommand = new ModCustomCommand(command.getName());
+        customCommand.setPermission(permissionNode);
+        if (list != null) customCommand.setAliases(list);
+        commandMap.register(command.getName(), customCommand);
+        if ( MagmaConfig.instance.debugPrintCommandNode.getValues()) {
+            LogManager.getLogger().info("Registered command " + command.getName() + " with permission node " + permissionNode);
+        }
+        if (list != null) {
+            for (String s : list) {
+                ICommand icommand = (ICommand)this.commandMap.get(s);
+                if (icommand == null || !icommand.getName().equals(s)) {
+                    this.commandMap.put(s, command);
+                }
+            }
+        }
         return command;
     }
 
@@ -224,6 +251,11 @@
         return this.commandMap;
     }
 
+    public Map<String, ICommand> getCommandMod()
+    {
+        return this.commandMod;
+    }
+
     private int getUsernameIndex(ICommand command, String[] args) throws CommandException
     {
         if (command == null)
