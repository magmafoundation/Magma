--- ../src-base/minecraft/net/minecraft/server/dedicated/DedicatedServer.java
+++ ../src-work/minecraft/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,18 +1,12 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
+import co.aikar.timings.MinecraftTimings;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStreamReader;
+import java.io.*;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
-import java.util.Collections;
-import java.util.List;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
@@ -43,30 +37,50 @@
 import net.minecraft.world.World;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.WorldType;
+import net.minecraft.world.chunk.storage.AnvilSaveConverter;
+import net.minecraftforge.fml.relauncher.ServerLaunchWrapper;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraftforge.server.permission.PermissionAPI;
+import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.World.Spigot;
+import org.bukkit.craftbukkit.v1_12_R1.LoggerOutputStream;
+import org.bukkit.craftbukkit.v1_12_R1.Main;
+import org.bukkit.craftbukkit.v1_12_R1.util.ForwardLogHandler;
+import org.bukkit.craftbukkit.v1_12_R1.util.TerminalConsoleWriterThread;
+import org.bukkit.craftbukkit.v1_12_R1.util.Waitable;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 
+import org.bukkit.craftbukkit.v1_12_R1.command.CraftRemoteConsoleCommandSender;
+import org.magmafoundation.magma.commands.MagmaCommand;
+import org.magmafoundation.magma.commands.permission.BukkitPermissionsHandler;
+import org.magmafoundation.magma.configuration.MagmaConfig;
+import org.magmafoundation.magma.utils.TPSTracker;
+import org.spigotmc.SpigotConfig;
+
 @SideOnly(Side.SERVER)
 public class DedicatedServer extends MinecraftServer implements IServer
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Pattern RESOURCE_PACK_SHA1_PATTERN = Pattern.compile("^[a-fA-F0-9]{40}$");
-    public final List<PendingCommand> pendingCommandList = Collections.<PendingCommand>synchronizedList(Lists.newArrayList());
+    public final java.util.Queue<PendingCommand> pendingCommandList = new java.util.concurrent.ConcurrentLinkedQueue<>(); // Paper - use a proper queue
     private RConThreadQuery rconQueryThread;
-    private final RConConsoleSource rconConsoleSource = new RConConsoleSource(this);
+    public final RConConsoleSource rconConsoleSource = new RConConsoleSource(this);
     private RConThreadMain rconThread;
-    private PropertyManager settings;
+    public PropertyManager settings;
     private ServerEula eula;
     private boolean canSpawnStructures;
     private GameType gameType;
     private boolean guiIsEnabled;
     public static boolean allowPlayerLogins = false;
 
-    public DedicatedServer(File anvilFileIn, DataFixer dataFixerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
+    // CraftBukkit start - Signature changed
+    public DedicatedServer(joptsimple.OptionSet options, DataFixer dataFixerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
     {
-        super(anvilFileIn, Proxy.NO_PROXY, dataFixerIn, authServiceIn, sessionServiceIn, profileRepoIn, profileCacheIn);
+        super(options, Proxy.NO_PROXY, dataFixerIn, authServiceIn, sessionServiceIn, profileRepoIn, profileCacheIn);
         Thread thread = new Thread("Server Infinisleeper")
         {
             {
@@ -96,15 +110,24 @@
         {
             public void run()
             {
-                if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
-                BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
+                if (!Main.useConsole) {
+                    return;
+                }
+                jline.console.ConsoleReader bufferedreader = reader;
                 String s4;
+                if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
 
-                try
-                {
-                    while (!DedicatedServer.this.isServerStopped() && DedicatedServer.this.isServerRunning() && (s4 = bufferedreader.readLine()) != null)
-                    {
-                        DedicatedServer.this.addPendingCommand(s4, DedicatedServer.this);
+
+                try {
+                    while (!isServerStopped() && isServerRunning()) {
+                        if (Main.useJline) {
+                            s4 = bufferedreader.readLine(">", null);
+                        } else {
+                            s4 = bufferedreader.readLine();
+                        }
+                        if (s4 != null && s4.trim().length() > 0) { // Trim to filter lines which are just spaces
+                            addPendingCommand(s4, DedicatedServer.this);
+                        }
                     }
                 }
                 catch (IOException ioexception1)
@@ -113,6 +136,27 @@
                 }
             }
         };
+
+        // CraftBukkit start - TODO: handle command-line logging arguments
+        java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+        global.setUseParentHandlers(false);
+        for (java.util.logging.Handler handler : global.getHandlers()) {
+            global.removeHandler(handler);
+        }
+        global.addHandler(new ForwardLogHandler());
+
+        final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
+        for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+            if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+                logger.removeAppender(appender);
+            }
+        }
+
+        new Thread((Runnable)new TerminalConsoleWriterThread((OutputStream)System.out, this.reader)).start();
+        System.setOut(new PrintStream(new LoggerOutputStream(logger, Level.INFO), true));
+        System.setErr(new PrintStream(new LoggerOutputStream(logger, Level.WARN), true));
+        // CraftBukkit end
+
         thread.setDaemon(true);
         thread.start();
         LOGGER.info("Starting minecraft server version 1.12.2");
@@ -125,7 +169,7 @@
         net.minecraftforge.fml.common.FMLCommonHandler.instance().onServerStart(this);
 
         LOGGER.info("Loading properties");
-        this.settings = new PropertyManager(new File("server.properties"));
+        this.settings =  new PropertyManager(this.options); // CraftBukkit - CLI argument support
         this.eula = new ServerEula(new File("eula.txt"));
 
         if (!this.eula.hasAcceptedEULA())
@@ -142,9 +186,9 @@
             }
             else
             {
-                this.setOnlineMode(this.settings.getBooleanProperty("online-mode", true));
+                this.setOnlineMode(SpigotConfig.bungee ? false : this.settings.getBooleanProperty("online-mode", true));
                 this.setPreventProxyConnections(this.settings.getBooleanProperty("prevent-proxy-connections", false));
-                this.setHostname(this.settings.getStringProperty("server-ip", ""));
+                this.setHostname(this.settings.getStringProperty("server-ip", "0.0.0.0"));
             }
 
             this.setCanSpawnAnimals(this.settings.getBooleanProperty("spawn-animals", true));
@@ -180,11 +224,24 @@
             {
                 this.setServerPort(this.settings.getIntProperty("server-port", 25565));
             }
+            // Spigot start
+            this.setPlayerList(new DedicatedPlayerList(this));
+            SpigotConfig.init((File) options.valueOf("spigot-settings"));
+            SpigotConfig.registerCommands();
+            // Spigot end
 
+            // Paper start
+            com.destroystokyo.paper.PaperMCConfig.init((File) options.valueOf("paper-settings"));
+            com.destroystokyo.paper.PaperMCConfig.registerCommands();
+            // Paper end
+
+            MagmaConfig.instance.registerCommands();
+
             LOGGER.info("Generating keypair");
             this.setKeyPair(CryptManager.generateKeyPair());
             LOGGER.info("Starting Minecraft server on {}:{}", this.getServerHostname().isEmpty() ? "*" : this.getServerHostname(), Integer.valueOf(this.getServerPort()));
 
+		if(!SpigotConfig.lateBind) {
             try
             {
                 this.getNetworkSystem().addLanEndpoint(inetaddress, this.getServerPort());
@@ -196,13 +253,6 @@
                 LOGGER.warn("Perhaps a server is already running on that port?");
                 return false;
             }
-
-            if (!this.isServerInOnlineMode())
-            {
-                LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
-                LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
-                LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
-                LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
             }
 
             if (this.convertFiles())
@@ -217,7 +267,7 @@
             else
             {
                 net.minecraftforge.fml.common.FMLCommonHandler.instance().onServerStarted();
-                this.setPlayerList(new DedicatedPlayerList(this));
+                this.anvilConverterForAnvilFile = new AnvilSaveConverter(server.getWorldContainer(), this.dataFixer); // CraftBukkit - moved from MinecraftServer constructor
                 long j = System.nanoTime();
 
                 if (this.getFolderName() == null)
@@ -254,6 +304,7 @@
                     worldtype = WorldType.DEFAULT;
                 }
 
+
                 this.isCommandBlockEnabled();
                 this.getOpPermissionLevel();
                 this.isSnooperEnabled();
@@ -271,8 +322,10 @@
                 long i1 = System.nanoTime() - j;
                 String s3 = String.format("%.3fs", (double)i1 / 1.0E9D);
                 LOGGER.info("Done ({})! For help, type \"help\" or \"?\"", (Object)s3);
-                this.currentTime = getCurrentTimeMillis();
 
+                new TPSTracker().trackTPS();
+
+                LOGGER.info("Starting Minecraft server on {}:{}", this.getServerHostname().isEmpty() ? "0.0.0.0" : this.getServerHostname(), String.valueOf(this.getServerPort()));
                 if (this.settings.hasProperty("announce-player-achievements"))
                 {
                     this.worlds[0].getGameRules().setOrCreateGameRule("announceAdvancements", this.settings.getBooleanProperty("announce-player-achievements", true) ? "true" : "false");
@@ -287,21 +340,32 @@
                     this.rconQueryThread.startThread();
                 }
 
-                if (this.settings.getBooleanProperty("enable-rcon", false))
-                {
+                if (this.settings.getBooleanProperty("enable-rcon", false)) {
                     LOGGER.info("Starting remote control listener");
                     this.rconThread = new RConThreadMain(this);
                     this.rconThread.startThread();
+                    this.remoteConsole = new CraftRemoteConsoleCommandSender(this.rconConsoleSource);
                 }
 
-                if (this.getMaxTickTime() > 0L)
-                {
-                    Thread thread1 = new Thread(new ServerHangWatchdog(this));
-                    thread1.setName("Server Watchdog");
-                    thread1.setDaemon(true);
-                    thread1.start();
+                if (this.server.getBukkitSpawnRadius() > -1) {
+                    DedicatedServer.LOGGER.info("'settings.spawn-radius' in bukkit.yml has been moved to 'spawn-protection' in server.properties. I will move your config for you.");
+                    this.settings.serverProperties.remove("spawn-protection");
+                    this.settings.getIntProperty("spawn-protection", this.server.getBukkitSpawnRadius());
+                    this.server.removeBukkitSpawnRadius();
+                    this.settings.saveProperties();
                 }
 
+                if (SpigotConfig.lateBind) {
+                    try {
+                        this.getNetworkSystem().addLanEndpoint(inetaddress, this.getServerPort());
+                    } catch (IOException ioexception) {
+                        LOGGER.warn("**** FAILED TO BIND TO PORT!");
+                        LOGGER.warn("The exception was: {}", (Object)ioexception.toString());
+                        LOGGER.warn("Perhaps a server is already running on that port?");
+                        return false;
+                    }
+                }
+
                 Items.AIR.getSubItems(CreativeTabs.SEARCH, NonNullList.create());
                 // <3 you Grum for this, saves us ~30 patch files! --^
                 return net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStarting(this);
@@ -427,11 +491,20 @@
 
     public void executePendingCommands()
     {
-        while (!this.pendingCommandList.isEmpty())
-        {
-            PendingCommand pendingcommand = this.pendingCommandList.remove(0);
-            this.getCommandManager().executeCommand(pendingcommand.sender, pendingcommand.command);
+        MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
+        // Paper - use proper queue
+        PendingCommand pendingcommand;
+        while ((pendingcommand = this.pendingCommandList.poll()) != null) {
+            // Paper end
+            // CraftBukkit start - ServerCommand for preprocessing
+            ServerCommandEvent event = new ServerCommandEvent(console, pendingcommand.command);
+            server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) continue;
+            pendingcommand = new PendingCommand(event.getCommand(), pendingcommand.sender);
+            server.dispatchServerCommand(console, pendingcommand);
+            // CraftBukkit end
         }
+        MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
     public boolean isDedicatedServer()
@@ -684,13 +757,78 @@
 
     public String getPlugins()
     {
-        return "";
+        // CraftBukkit start - Whole method
+        StringBuilder result = new StringBuilder();
+        org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+
+        result.append(server.getName());
+        result.append(" on Bukkit ");
+        result.append(server.getBukkitVersion());
+
+        if (plugins.length > 0 && server.getQueryPlugins()) {
+            result.append(": ");
+
+            for (int i = 0; i < plugins.length; i++) {
+                if (i > 0) {
+                    result.append("; ");
+                }
+
+                result.append(plugins[i].getDescription().getName());
+                result.append(" ");
+                result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+            }
+        }
+
+        return result.toString();
+        // CraftBukkit end
     }
 
-    public String handleRConCommand(String command)
+    // CraftBukkit start - fire RemoteServerCommandEvent
+    public String handleRConCommand(final String command)
     {
-        this.rconConsoleSource.resetLog();
-        this.commandManager.executeCommand(this.rconConsoleSource, command);
-        return this.rconConsoleSource.getLogContents();
+        Waitable<String> waitable = new Waitable<String>() {
+            @Override
+            protected String evaluate() {
+                rconConsoleSource.resetLog();
+                // Event changes start
+                RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, command);
+                server.getPluginManager().callEvent(event);
+                if (event.isCancelled()) {
+                    return "";
+                }
+                // Event change end
+                PendingCommand serverCommand = new PendingCommand(event.getCommand(), rconConsoleSource);
+                server.dispatchServerCommand(remoteConsole, serverCommand);
+                return rconConsoleSource.getLogContents();
+            }
+        };
+        // Paper start
+        if (command.toLowerCase().startsWith("timings") && command.toLowerCase().matches("timings (report|paste|get|merged|seperate)")) {
+            org.bukkit.command.BufferedCommandSender sender = new org.bukkit.command.BufferedCommandSender();
+            waitable = new Waitable<String>() {
+                @Override
+                protected String evaluate() {
+                    return sender.getBuffer();
+                }
+            };
+            co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
+        } else {
+            processQueue.add(waitable);
+        }
+        // Paper end
+        try {
+            return waitable.get();
+        } catch (java.util.concurrent.ExecutionException e) {
+            throw new RuntimeException("Exception processing rcon command " + command, e.getCause());
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt(); // Maintain interrupted state
+            throw new RuntimeException("Interrupted processing rcon command " + command, e);
+        }
     }
+    // CraftBukkit end
+
+    @Override
+    public PropertyManager getPropertyManager() {
+        return this.settings;
+    }
 }
