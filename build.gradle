buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url  "https://jcenter.bintray.com"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3+'
        classpath 'net.nemerosa:versioning:2.7.1'
        classpath "gradle.plugin.com.github.breadmoirai:github-release:2.2.9"
        classpath "gradle.plugin.net.minecrell:licenser:0.4.1"
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "idea"
apply plugin: 'net.minecraftforge.gradle.patcher'
apply plugin: 'net.minecraftforge.gradle.launch4j'
apply plugin: 'net.nemerosa.versioning'
apply plugin: "com.github.breadmoirai.github-release"
apply plugin: "net.minecrell.licenser"

group 'magmafoundation'
version versioning.info.build

println(version)

repositories {
    clear()
    mavenCentral()
    maven {
        name = "forge"
        url = "https://files.minecraftforge.net/maven"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name 'minecraft'
        url 'https://libraries.minecraft.net/'
    }
    maven {
        name 'maven'
        url 'https://mvnrepository.com/artifact/'
    }
    maven {
        name 'MagmaFoundation'
        url 'https://repo.hexeption.dev/repository/magma/'
    }
    flatDir {
        dirs 'src/main/resources'
    }
}

configurations{
    compile.extendsFrom exported
    libraries
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile(group: 'bukkit', name: 'bukkit', version: '1.12.2-R0.1')
    compile 'com.conversantmedia:disruptor:1.2.14'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'commons-lang:commons-lang:2.6'
    compile 'jline:jline:2.13'
    compile 'mysql:mysql-connector-java:5.1.46'
    compile 'net.md-5:SpecialSource:1.8.5'
    compile 'net.md-5:bungeecord-chat:1.12-SNAPSHOT'
    compile 'net.minecraft:launchwrapper:1.12'
    compile 'org.projectlombok:lombok:1.16.12'
    compile 'net.sf.jopt-simple:jopt-simple:5.0.3'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'com.mojang:authlib:1.5.25'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.google.guava:guava:21.0'
    compile 'commons-lang:commons-lang:2.6'
    compile 'jline:jline:2.13'
    compile 'mysql:mysql-connector-java:5.1.46'
    compile 'it.unimi.dsi:fastutil:7.1.0'
    compile 'org.yaml:snakeyaml:1.19'
    compile 'org.jline:jline:3.5.1'
    compile 'io.netty:netty-all:4.1.9.Final'
    compile 'org.xerial:sqlite-jdbc:3.21.0.1'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.ow2.asm:asm-debug-all:5.2'
    compile 'org.apache.logging.log4j:log4j-iostreams:2.12.1'
    compile 'org.apache.logging.log4j:log4j-api:2.8.1'
    compile 'org.apache.logging.log4j:log4j-core:2.8.1'
    compile 'org.reflections:reflections:0.9.10'
    compile 'javassist:javassist:3.12.1.GA'
}

jar{
    into('lib') {
        from configurations.libraries
    }
    exclude "**/configurations/**"
    exclude "**/META-INF/**"
    exclude "log4j2.xml"
}

sourceSets {
    main.java.srcDir 'src/main/java/'
    main.java.srcDir 'projects/Magma/src/main/java/'
    test.java.srcDir 'src/test/java/'
}


minecraft {
    version = "1.12.2"
    mappings = "snapshot_nodoc_20171003"
    workspaceDir = "projects"
    versionJson = "jsons/1.12.2-dev.json"
    buildUserdev = true
    buildInstaller = false
    installerVersion = "1.5"

    def common = {
        patchPrefixOriginal "../src-base/minecraft"
        patchPrefixChanged "../src-work/minecraft"
        mainClassServer "net.minecraft.launchwrapper.Launch"
        tweakClassServer "net.minecraftforge.fml.common.launcher.FMLServerTweaker"
    }

    projects {
        forge {
            rootDir "forge/"
            patchDir "forge/patches/minecraft/"
            patchAfter "clean"
            genPatchesFrom "clean"
            genMcpPatches = false
            applyMcpPatches = false
            s2sKeepImports = true
            with common
        }

        magma {
            rootDir "."
            patchDir "patches/"
            patchAfter "forge"
            genPatchesFrom "forge"
            genMcpPatches = true
            applyMcpPatches = true
            s2sKeepImports = true
            with common
        }
    }
}

sourceCompatibility = 1.8
tasks.generateXmlConfig.dependsOn installer
tasks.compileJava.enabled = false
tasks.build.dependsOn 'launch4j'

installer {
    classifier = 'installer'
    from "forge/src/main/resources/forge_logo.png"
    rename "forge_logo\\.png", "big_logo.png"
}

launch4j {
    jar = installer.archivePath.canonicalPath
    outfile = file("build/distributions/${project.name}-${project.version}-installer-win.exe").canonicalPath
    icon = file('icon.ico').canonicalPath
    manifest = file('l4jManifest.xml').canonicalPath
    jreMinVersion = '1.8.0'
    initialHeapPercent = 5
    maxHeapPercent = 100
}

task launchServer(type: JavaExec, dependsOn: 'launch4j') {
    main = "-jar"
    args file("build/distributions/${project.name}-${project.version}-server.jar").canonicalPath
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task signUniversal(type: SignJar, dependsOn: 'outputJar') {
    onlyIf {
        project.hasProperty('jarsigner')
    }

    def jarsigner = [:]

    if (project.hasProperty('jarsigner'))
        jarsigner = project.jarsigner

    alias = 'forge'
    exclude "paulscode/**"
    storePass = jarsigner.storepass
    keyPass = jarsigner.keypass
    keyStore = jarsigner.keystore
    inputFile = outputJar.archivePath
    outputFile = outputJar.archivePath
}
build.dependsOn signUniversal
installer.dependsOn signUniversal

outputJar {
    classifier = 'server'

    manifest.attributes([
            "Implementation-Title": "Magma",
            "Implementation-Version": version,
            "Main-Class": "net.minecraftforge.fml.relauncher.ServerLaunchWrapper",
            "TweakClass": "net.minecraftforge.fml.common.launcher.FMLTweaker",
            "Class-Path": "minecraft_server.1.12.2.jar"
    ])
}

processJson {
    releaseJson = "jsons/1.12.2-rel.json"
    addReplacements([
            "@minecraft_version@": project.minecraft.version,
            "@version@": project.version,
            "@project@": "magma",
            "@artifact@": "mf:magma:${project.version}",
            "@universal_jar@": { outputJar.archiveName },
            "@timestamp@": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    ])
}

extractForgeSources {
    exclude "**/SideOnly.java", "**/Side.java"
}

genGradleProjects {
    addCompileDep "junit:junit:4.12"
    addCompileDep "bukkit:bukkit:1.12.2-R0.1"
    addCompileDep "org.reflections:reflections:0.9.10"
    addCompileDep "javassist:javassist:3.12.1.GA"
    addRepo("MagmaFoundation", "https://repo.hexeption.dev/repository/magma/")
}

def patcher_plugin = plugins.apply('net.minecraftforge.gradle.patcher')
task genPluginJar(type: net.minecraftforge.gradle.patcher.TaskReobfuscate, dependsOn: reobfuscate) {
    srg = patcher_plugin.delayedFile('{CACHE_DIR}/de/oceanlabs/mcp/mcp_{MAPPING_CHANNEL}/{MAPPING_VERSION}/{MC_VERSION}/srgs/mcp-srg.srg')
    exc = reobfuscate.exc
    preFFJar = reobfuscate.preFFJar
    methodsCsv = reobfuscate.methodsCsv
    fieldsCsv = reobfuscate.fieldsCsv
    addLibs reobfuscate.libs
    inJar = patcher_plugin.delayedFile('{BUILD_DIR}/localCache/Magma/recompiled.jar')
    outJar = "build/distributions/Magma-${versioning.info.build}-plugin.jar"
}

license {
    header = file("$rootDir/LICENSE-header.txt")

    include 'org/magmafoundation/'

    tasks {
        main {
            files = files("$rootDir/src/main/java")
        }
        test {
            files = files("$rootDir/src/test/java")
        }
    }
}

githubRelease {
    if(System.getenv("GITHUB_TOKEN") != null){
        token System.getenv("GITHUB_TOKEN")
    }else{
        token ""
    }
    owner "MagmaFoundation"
    repo "Magma"
    releaseName "Magma Dev " + versioning.info.branch + "-" + versioning.info.build
    prerelease true
//    body { """\
//## Change Log
//${changelog().call().replace('\n', '\n* ')}
//""" }
    draft false
    releaseAssets = [
        fileTree("build/distributions/").filter { it.name.endsWith("jar") || it.name.endsWith("zip") },
        fileTree("/release/").filter { it.name.endsWith("zip") }
    ]
}
